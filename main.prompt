```
Please write the code in the following way: 

1. The source code must be capable of achieving the required technical result.
2. The source code should use all available elements not relevant to the first goal, to adhere to the principles of clear communication, thereby preserving its connection to the business problem.

The elements you may use to communicate the connection with the business problem are:
- variable names
- class names
- method names
- the general structure of the code (e.g. how you split it into separate functions)
- comments

The rules are:
- Make sure that the elements are used unambiguous and remain connected to the business problem context.
- Does the code make sense? ("Can you comprehend what is being said?")
- Is the connection to the business problem convincing "at face value"?
- Are no intermediate steps missing?
  
Please write the code in python.
```

Please write me a main.py file that can do the following:

## Configuration

- There is a config.json file in the directory of the executable.
- If the config.json file does not yet exist at application startup, the app will ask the user for a GPT-4 key. The config.json is then written including the GPT4-API-key and the application exits.
- If the config.json file exists, the app will read the configuration into variables.

## General functionality

- It should walk through a directory structure recursivly, looking for .prompt files.

- Change detection:
  - Every time the app finds a .prompt-file it checks if a .prompt.checksum-file exists next to the file. E.g. a file something.prompt may have a something.prompt.checksum file next to it.
  - It will create a checksum e.g. in MD5 for the .prompt file.
  - It will compare the self-created checksum with the checksum that is contained in the .prompt.checksum file.
  - Do both differ (or does the .prompt.checksum file not exist) then process the file.
  - Update the .prompt.checksum to reflect the newly created checksum of its corresponding .prompt file.

- Prepare a function that can send a prompt to the ChatGPT-4 API using the api-key.

- How processing of a file is done:
  - The .prompt file is read into a list of strings.
  - Then go through all the lines in the file.
    - If the line starts with `#include`, the rest of the line is a relative path pointing to another file whose content should be included in the preparedPrompt. (read the content of the file and add it to the prepared prompt)
    - Any other line is just added to the preparedPrompt.
  - Send the prompt to chat-GPT4.
  - Write the result to a file with the same name but with an .output extension added.

