Here is the Python code for the described functionality. This script uses the `os`, `json`, `hashlib`, and `argparse` libraries to walk through directories, read and write JSON files, compute MD5 checksums, and parse command line arguments respectively. It also uses a hypothetical `library.chatgpt` module to call the GPT-4 API.

```python
import os
import json
import hashlib
import argparse
from library.chatgpt import call_gpt_4

CONFIG_FILE = 'config.json'
GPT_4_KEY = 'gpt_4_key'
PROMPT_EXT = '.prompt'
CHECKSUM_EXT = '.prompt.checksum'
OUTPUT_EXT = '.output'

def get_config():
    config = {}
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            config = json.load(f)
    else:
        config[GPT_4_KEY] = input("Enter GPT-4 key: ")
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f)
        print("Configuration saved. Please restart the application.")
        exit(0)
    return config

def process_file(file_path, gpt_4_key):
    print(f"Processing file: {file_path}")
    checksum_file = file_path + CHECKSUM_EXT
    checksum = hashlib.md5(open(file_path, 'rb').read()).hexdigest()
    if os.path.exists(checksum_file):
        with open(checksum_file, 'r') as f:
            if f.read() == checksum:
                print(f"File: {file_path} has not changed.")
                return
    with open(checksum_file, 'w') as f:
        f.write(checksum)
    prepared_prompt = []
    with open(file_path, 'r') as f:
        for line in f:
            if line.startswith('#include'):
                include_file = os.path.join(os.path.dirname(file_path), line[8:].strip())
                with open(include_file, 'r') as include_f:
                    prepared_prompt.extend(include_f.readlines())
            else:
                prepared_prompt.append(line)
    result = call_gpt_4(gpt_4_key, ''.join(prepared_prompt))
    with open(file_path + OUTPUT_EXT, 'w') as f:
        f.write(result)

def walk_directory(dir_path, gpt_4_key):
    for root, dirs, files in os.walk(dir_path):
        for file in files:
            if file.endswith(PROMPT_EXT):
                process_file(os.path.join(root, file), gpt_4_key)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('dir', nargs='?', default=os.getcwd())
    args = parser.parse_args()
    config = get_config()
    walk_directory(args.dir, config[GPT_4_KEY])

if __name__ == "__main__":
    main()
```

Please ensure that the `library/chatgpt.py` file exists and contains a function `call_gpt_4(openaikey, prompt)` for this script to work.