Here is the Python code for your requirements:

```python
import os
import sys
import hashlib
import json
from library.chatgpt import call_gpt_4
from library.interface_creator import extract_functions

# Define constants
CONFIG_FILE = 'config.json'
GPT_4_KEY = 'gpt_4_key'
PROMPT_FILE_EXT = '.prompt'
CHECKSUM_FILE_EXT = '.prompt.checksum'
COMPLETED_FILE_EXT = '.prompt.completed'
OUTPUT_FILE_EXT = '.prompt.output'
INTERFACE_FILE_EXT = '.interface'

# Check if config.json exists and get the GPT-4 key
def get_gpt_4_key():
    if not os.path.exists(CONFIG_FILE):
        gpt_4_key = input("Please enter your GPT-4 key: ")
        with open(CONFIG_FILE, 'w') as config_file:
            json.dump({GPT_4_KEY: gpt_4_key}, config_file)
        sys.exit(0)
    else:
        with open(CONFIG_FILE, 'r') as config_file:
            config = json.load(config_file)
        return config[GPT_4_KEY]

# Create a checksum for a file
def create_checksum(file_path):
    hasher = hashlib.md5()
    with open(file_path, 'rb') as afile:
        buf = afile.read()
        hasher.update(buf)
    return hasher.hexdigest()

# Process a .prompt file
def process_file(file_path, gpt_4_key):
    print(f"Processing file: {file_path}")
    checksum = create_checksum(file_path)
    checksum_file_path = file_path + CHECKSUM_FILE_EXT

    # Check if checksum file exists and compare checksums
    if os.path.exists(checksum_file_path):
        with open(checksum_file_path, 'r') as checksum_file:
            old_checksum = checksum_file.read().strip()
        if old_checksum == checksum:
            print(f"File {file_path} has not changed, skipping.")
            return
    with open(checksum_file_path, 'w') as checksum_file:
        checksum_file.write(checksum)

    # Start processing the .prompt file
    with open(file_path, 'r') as prompt_file:
        lines = prompt_file.readlines()
    output_file_name = None
    create_interface = False
    prepared_prompt = ''
    for line in lines:
        if line.startswith('#include'):
            include_file_path = os.path.join(os.path.dirname(file_path), line.strip().split(' ')[1])
            with open(include_file_path, 'r') as include_file:
                prepared_prompt += include_file.read()
        elif line.startswith('#write-to'):
            output_file_name = os.path.join(os.path.dirname(file_path), line.strip().split(' ')[1])
        elif line.startswith('#create-interface'):
            create_interface = True
        else:
            prepared_prompt += line

    # Save the preparedPrompt to the related *.prompt.completed - file
    with open(file_path + COMPLETED_FILE_EXT, 'w') as completed_file:
        completed_file.write(prepared_prompt)

    # Call GPT-4 and write the output
    output = call_gpt_4(gpt_4_key, prepared_prompt)
    with open(file_path + OUTPUT_FILE_EXT, 'w') as output_file:
        output_file.write(output)

    # Post processing
    if output_file_name:
        post_process(output, output_file_name, create_interface)

# Post processing function
def post_process(output, output_file_name, create_interface):
    print(f"Post processing: {output_file_name}")
    content = output.split('```')[1]
    with open(output_file_name, 'w') as output_file:
        output_file.write(content)
    if create_interface:
        interface_content = extract_functions(content, output_file_name)
        with open(output_file_name + INTERFACE_FILE_EXT, 'w') as interface_file:
            interface_file.write(interface_content)

# Walk through a directory recursively
def walk_directory(directory, gpt_4_key):
    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.endswith(PROMPT_FILE_EXT):
                process_file(os.path.join(root, file), gpt_4_key)

# Main function
def main():
    gpt_4_key = get_gpt_4_key()
    directory = sys.argv[1] if len(sys.argv) > 1 else os.getcwd()
    walk_directory(directory, gpt_4_key)

if __name__ == "__main__":
    main()
```

This script follows your requirements and has plenty of print statements for debugging. It uses the hashlib library to create checksums and the os and sys libraries to walk through directories and handle files. The script also uses the library.chatgpt and library.interface_creator modules for calling GPT-4 and creating interfaces.